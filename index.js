// Generated by CoffeeScript 1.6.3
var SKIP, all, asSeq, changedBetween, commitTreeEntry, empty, filterM, git, join, log, logSeq, map, previousCommitsSeq, produced, reduced, series, window, _ref;

git = require('gitteh-promisified');

commitTreeEntry = require('gitteh-tree-entry').commitTreeEntry;

all = require('kew').all;

_ref = require('reduced'), SKIP = _ref.SKIP, asSeq = _ref.asSeq, produced = _ref.produced, reduced = _ref.reduced, join = _ref.join, series = _ref.series, map = _ref.map, empty = _ref.empty, window = _ref.window;

filterM = function(seq, f) {
  seq = asSeq(seq);
  return {
    next: function(done) {
      return seq.next(function(s, v) {
        if (s != null) {
          return done(s);
        }
        return reduced(asSeq(f(v))).then(function(allowed) {
          if (allowed) {
            return done(null, v);
          } else {
            return done(SKIP);
          }
        }).end();
      });
    }
  };
};

changedBetween = function(path, commit, prevCommit) {
  if (prevCommit != null) {
    return all(commitTreeEntry(commit, path), commitTreeEntry(prevCommit, path)).then(function(_arg) {
      var changed, created, entry, prevEntry;
      entry = _arg[0], prevEntry = _arg[1];
      created = entry && !prevEntry;
      changed = (entry != null ? entry.id : void 0) !== (prevEntry != null ? prevEntry.id : void 0);
      return changed || created;
    });
  } else {
    return commitTreeEntry(commit, path);
  }
};

previousCommitsSeq = function(commit) {
  var getCommit, getPreviousCommit;
  getCommit = function(id) {
    return commit.then(function(commit) {
      return commit.repository.commit(id);
    });
  };
  getPreviousCommit = function(commit) {
    var parents;
    if (commit.parents.length > 0) {
      parents = map(commit.parents, getCommit);
      return join(map(parents, previousCommitsSeq));
    } else {
      return empty();
    }
  };
  return join(series(getPreviousCommit, commit));
};

logSeq = function(ref, file) {
  var commits;
  commits = previousCommitsSeq(ref.repository.commit(ref.target));
  if (file != null) {
    commits = filterM(window(commits, 2), function(_arg) {
      var commit, prevCommit;
      commit = _arg[0], prevCommit = _arg[1];
      return changedBetween(file, commit, prevCommit);
    });
    return map(commits, function(_arg) {
      var commit, prevCommit;
      commit = _arg[0], prevCommit = _arg[1];
      return commit;
    });
  } else {
    return commits;
  }
};

log = function(ref, file) {
  return produced(logSeq(ref, file));
};

module.exports = {
  log: log,
  logSeq: logSeq,
  previousCommitsSeq: previousCommitsSeq
};
